#!/usr/bin/gawk -f
#
# Usage:
# on the commandline
# ./grawk start-string [not optional flag] end-string [not optional flag] [optional exc]
# 
# ./grawk CRON -1 ")" -2 /var/log/syslog 
# OUTPUT: This will search for the first instance CRON as a starting string up to the second instance of ")" from syslog
# 
# ./grawk CRON -1 $ /var/log/syslog 
# OUTPUT: Search for first instance of CRON to end of the line from syslog
#
# ./grawk root -1 "/" -1 exc /etc/passwd
# OUTPUT:
# root:x:0:0:root:
# root:x:524288:524288::
#
# ./grawk root -1 "/" -2 exc /etc/passwd
# root:x:0:0:root:/root:
# root:x:524288:524288::/nonexistent:
#
# ./grawk dns -1 , -1 exc /etc/passwd
# OUTPUT:
# dnsmasq:x:112:65534:dnsmasq
# dnsmasq:x:132:141:Libvirt Dnsmasq
# 
# cat /etc/passwd | ./grawk root $
# OUTPUT:
# root:x:0:0:root:/root:/bin/bash
# root:/usr/sbin/nologin
# root:x:524288:524288::/nonexistent:/usr/bin/false


BEGIN{
	# start string search
	start = ARGV[1]
    delete ARGV[1]
	
	# does start have a number value option (flag) between 1-9, if so add a num1 counter to other ARGVs
	if ( ARGV[2] ~ "-[1-9]{1}" ) {
		startappear = substr(ARGV[2],2,2)
		num1 += 1
		delete ARGV[2]
		}
	
	# Last string pattern to extract up to, from the start string
    last = ARGV[2 + num1]
	
	# length of the last string to be used at the end to calculate string size
	len=length(last)
    delete ARGV[2 + num1]
	
	# Check if last string has a number value with a fancy delimiter. The reason for the alternative delimeter, is to use this
	# to remove, then replace. For instance, if you put a minus delimiter in -2, this code will use this to replace the last character,
	# but also use this to replace all instances of the minus '-'. The idea is, if the text uses a minus in abundance in the text file
	# you should probably swap it out for a special character that's not in use. I am probably going to look at a better method for this, but figured it
	# might also be a useful hacky feature.
	if (ARGV[3 + num1] ~ "[-+~/.,?@<>|#=*][1-9]{1}" ) {
		lastappear = substr(ARGV[3 + num1],2,2)
		delim = substr(ARGV[3 + num1],1,1)
		delete ARGV[3 + num1]
		num1 += 1
		}
	
	# Including an exc argument at the end of the command line will exclude the last character, unless last == "$"
	# If last == "$" the line printed will begin at start, finish at the end of the line.
	# If the last character is a /, and $ is not included with exc, then a search of /home/user/ will turn into /home/user 
	if (ARGV[3 + num1] == "exc") {
		len -= 1
		delete ARGV[3 + num1]
		}
}
{
	# Ok, i really wanted this to work with a loop, but my loops were problematic, and i think they kept resetting. I will revisit as i learn.
	# What this section does, is look for the start flag value, i.e. grawk root -2 $ /etc/passwd will use the second instance root is found in a line,
	# and with the $ flag, it'll print to the end of line.
	# grawk root -2 "/" -1 will look for the second instance of root in a line, and print up to the first "/"
	# grawk root -2 "/" -1  exc , will look for the second instance of root in a line, and print up to the first "/", excluding the last character "/"
	# There is another hacky thing you can do if you just want the whole line, and place a period before the start search. I'm looking to perhaps add this
	# in properly so it also works up to an end character rather than end of line.
	# Note: == 1 is not included because the first instance is the default, but the -1 flag is still required
	
	if ( startappear == 2 ) {$0 = gensub(start,"",1)}
	if ( startappear == 3 ) {$0 = gensub(start,"",1,gensub(start,"",1))}
	if ( startappear == 4 ) {$0 = gensub(start,"",1,gensub(start,"",1,gensub(start,"",1)))}
	if ( startappear == 5 ) {$0 = gensub(start,"",1,gensub(start,"",1,gensub(start,"",1,gensub(start,"",1))))}
	if ( startappear == 6 ) {$0 = gensub(start,"",1,gensub(start,"",1,gensub(start,"",1,gensub(start,"",1,gensub(start,"",1)))))}
	if ( startappear == 7 ) {$0 = gensub(start,"",1,gensub(start,"",1,gensub(start,"",1,gensub(start,"",1,gensub(start,"",gensub(start,"",1))))))}
	if ( startappear == 8 ) {$0 = gensub(start,"",1,gensub(start,"",1,gensub(start,"",1,gensub(start,"",1,gensub(start,"",1,gensub(start,"",1,gensub(start,"",1)))))))}
	if ( startappear == 9 ) {$0 = gensub(start,"",1,gensub(start,"",1,gensub(start,"",1,gensub(start,"",1,gensub(start,"",1,gensub(start,"",1,gensub(start,"",1,gensub(start,"",1))))))))}

	if ( lastappear == 2 ) {$0 = gensub(last,delim,1)}
	if ( lastappear == 3 ) {$0 = gensub(last,delim,1,gensub(last,delim,1))}
	if ( lastappear == 4 ) {$0 = gensub(last,delim,1,gensub(last,delim,1,gensub(last,delim,1)))}
	if ( lastappear == 5 ) {$0 = gensub(last,delim,1,gensub(last,delim,1,gensub(last,delim,1,gensub(last,delim,1))))}
	if ( lastappear == 6 ) {$0 = gensub(last,delim,1,gensub(last,delim,1,gensub(last,delim,1,gensub(last,delim,1,gensub(last,delim,1)))))}
	if ( lastappear == 7 ) {$0 = gensub(last,delim,1,gensub(last,delim,1,gensub(last,delim,1,gensub(last,delim,1,gensub(last,delim,gensub(last,delim,1))))))}
	if ( lastappear == 8 ) {$0 = gensub(last,delim,1,gensub(last,delim,1,gensub(last,delim,1,gensub(last,delim,1,gensub(last,delim,1,gensub(last,delim,1,gensub(last,delim,1)))))))}
	if ( lastappear == 9 ) {$0 = gensub(last,delim,1,gensub(last,delim,1,gensub(last,delim,1,gensub(last,delim,1,gensub(last,delim,1,gensub(last,delim,1,gensub(last,delim,1,gensub(last,delim,1))))))))}

	$0 ~ start && $0 ~ last && b[lines++]=$0 
}

# This below uses the data above to index and format the desired (hopefully) string output.
END{
	for (i in b) {
			if ( last == "$" ) {
				n=index(b[i],start)
    			z=substr(b[i],n)
				if (z != "") {
					print "\033[33m"z"\033[0m"    		
				}    		
			} else {
				n=index(b[i],start)
   				c=index(b[i],last)
    			z=substr(b[i],n,c-n+len)
				gsub(delim,last,z)
				if (z != "") {
					print "\033[33m"z"\033[0m"    		
				}    		
			}
	}
}
